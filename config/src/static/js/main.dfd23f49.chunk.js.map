{"version":3,"sources":["imgs/Azalea.jpg","imgs/rtbot.jpg","logo.png","imgs/Discord-Logo-Black.svg","imgs/navercafe.jpg","Navibar.js","App.js","datas/botlist.js","Home.js","serviceWorker.js","index.js"],"names":["module","exports","Navibar","Navbar","bg","expand","fixed","className","Brand","href","src","logo","style","width","marginRight","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","azalea","rtbot","marginLeft","as","config","discord_invite","target","discordicon","navercafe","Component","App","botlist","name","img","description","invite","Home","bots","map","one","Col","xl","lg","md","Card","xs","Img","variant","marginTop","Body","Title","Text","Button","Container","fluid","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfd23f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Azalea.5710b626.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rtbot.24db7028.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.b9e38daf.png\";","module.exports = __webpack_public_path__ + \"static/media/Discord-Logo-Black.41484d92.svg\";","module.exports = __webpack_public_path__ + \"static/media/navercafe.88af2587.jpg\";","import React, { Component } from 'react';\r\nimport { Nav, Navbar, Form, NavDropdown, Button, FormControl } from 'react-bootstrap';\r\n\r\nimport logo from './logo.png';\r\nimport discordicon from './imgs/Discord-Logo-Black.svg';\r\nimport navercafe from './imgs/navercafe.jpg';\r\nimport azalea from './imgs/Azalea.jpg';\r\nimport rtbot from './imgs/rtbot.jpg';\r\n\r\nimport config from './config.json';\r\n\r\nexport default class Navibar extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"white\" expand=\"sm\" fixed=\"top\" className=\"nav-item shadow rounded no-drag\">\r\n        <Navbar.Brand href=\"/\">\r\n          <img src={logo} style={{ width: 40, marginRight: 10 }} />\r\n          InfiniteTeam\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/\">홈</Nav.Link>\r\n            <NavDropdown title=\"디스코드 봇\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">\r\n              <img src={azalea} style={{ width: 27, marginRight: 10 }} />\r\n                Azalea\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                <img src={rtbot} style={{ width: 22, marginRight: 12, marginLeft: 2 }} />\r\n                알티봇\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown title=\"커뮤니티\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item as=\"a\" href={config.discord_invite} target='_blank'>\r\n                <img src={discordicon} style={{ width: 27, marginRight: 10 }} />\r\n                디스코드 서포트 서버\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item as=\"a\" href={config.navercafe} target=\"_blank\">\r\n                <img src={navercafe} style={{ width: 22, marginRight: 12, marginLeft: 2 }} />\r\n                네이버 카페\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Navibar from './Navibar'\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navibar />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import azalea from '../imgs/Azalea.jpg';\r\nimport rtbot from '../imgs/rtbot.jpg';\r\n\r\nconst botlist = [\r\n  {\r\n    name: \"azalea\",\r\n    title: \"Azalea\",\r\n    img: azalea,\r\n    description: \"아젤리아는 텍스트형 RPG 게임봇입니다. 자신의 캐릭터를 키우고 다양한 컨텐츠를 즐겨보세요.\",\r\n    invite: null\r\n  },\r\n  {\r\n    name: \"rtbot\",\r\n    title: \"알티봇\",\r\n    img: rtbot,\r\n    description: \"디스코드에서 다양한 미니게임을 즐겨보세요.\",\r\n    invite: null\r\n  }\r\n];\r\n\r\nexport default botlist;","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\r\n\r\nimport botlist from './datas/botlist';\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    const bots = botlist.map(\r\n      (one) => (\r\n        <Col xl={6} lg={6} md={6}>\r\n          <Card className=\"Botproject-card flex-row flex-wrap\">\r\n            <Col xl={4} lg={5} xs={9} className=\"Botproject-img\">\r\n              <Card.Img variant=\"top\" src={one.img} style={{marginTop: '1rem'}}/>\r\n            </Col>\r\n            <Col xl={8} lg={7}>\r\n              <Card.Body>\r\n                <Card.Title className=\"Botproject-card-title\">{one.title}</Card.Title>\r\n                <Card.Text className=\"Botproject-card-dsec\">\r\n                  {one.description}\r\n                </Card.Text>\r\n                <Button variant=\"infinite\">초대하기</Button>\r\n              </Card.Body>\r\n            </Col>\r\n          </Card>\r\n        </Col>\r\n      )\r\n    )\r\n\r\n    return (\r\n      <>\r\n        <div style={{marginTop: 65.94}}/>\r\n        <Container fluid className=\"Title-section-bg no-drag\">\r\n          <Container fluid=\"sm\" className=\"Title-ct text-center\">\r\n            <h1 className=\"Title-title\">\r\n              InfiniteTeam\r\n            </h1>\r\n            <h3 className=\"Title-subtitle\">\r\n              무한한 미래를 만들어갑니다\r\n            </h3>\r\n          </Container>\r\n        </Container>\r\n        <Container fluid>\r\n          <Container fluid=\"sm\" className=\"Intro-ct\">\r\n            <h1 className=\"Header\">\r\n              디스코드 봇 프로젝트\r\n            </h1>\r\n            <Container>\r\n              <Row className=\"no-gutters\">\r\n                {bots}\r\n              </Row>\r\n            </Container>\r\n          </Container>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport App from './App';\r\nimport Home from './Home';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport './Home.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n      <Route path=\"/\" component={Home} />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}